{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Documents/web-scraper/src/app/api/scrape/add/route.tsx"],"sourcesContent":["// app/api/scrape/route.ts\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { url } = await req.json();\r\n\r\n    if (!url || typeof url !== \"string\") {\r\n      return NextResponse.json(\r\n        { status: \"error\", message: \"Invalid or missing URL\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Example: Backend call to external scraping service\r\n    // Replace 'https://external-scraper.api/scrape' with your real endpoint\r\n    const externalResponse = await fetch(`${process.env.BACKEND_API}scrape/add`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ url }),\r\n    });\r\n\r\n    if (!externalResponse.ok) {\r\n      return NextResponse.json(\r\n        { status: \"error\", message: \"External API failed\" },\r\n        { status: externalResponse.status }\r\n      );\r\n    }\r\n\r\n    const data = await externalResponse.json();\r\n\r\n    return NextResponse.json({ status: \"success\", data });\r\n  } catch (error) {\r\n    console.error(\"Error in /api/scrape:\", error);\r\n    return NextResponse.json(\r\n      { status: \"error\", message: \"Internal Server Error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;AAE1B;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI;QAE9B,IAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,QAAQ;gBAAS,SAAS;YAAyB,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,qDAAqD;QACrD,wEAAwE;QACxE,MAAM,mBAAmB,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;YAC3E,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE;YAAI;QAC7B;QAEA,IAAI,CAAC,iBAAiB,EAAE,EAAE;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,QAAQ;gBAAS,SAAS;YAAsB,GAClD;gBAAE,QAAQ,iBAAiB,MAAM;YAAC;QAEtC;QAEA,MAAM,OAAO,MAAM,iBAAiB,IAAI;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;YAAW;QAAK;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,QAAQ;YAAS,SAAS;QAAwB,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}