{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Documents/web-scraper/src/app/api/scrape/status/%5Bid%5D/route.ts"],"sourcesContent":["// app/api/scrape/status/[job_id]/route.ts\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nexport async function GET(\r\n  req: NextRequest,\r\n  { params }: { params: { job_id: string } }\r\n) {\r\n  const { job_id } = params;\r\n\r\n  if (!job_id) {\r\n    return NextResponse.json(\r\n      { status: \"error\", message: \"Missing job_id parameter\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    // Call your external backend API to get job status\r\n    const externalResponse = await fetch(\r\n      `${process.env.BACKEND_API}scrape/status/${job_id}`\r\n    );\r\n\r\n    if (!externalResponse.ok) {\r\n      return NextResponse.json(\r\n        { status: \"error\", message: \"External API failed\" },\r\n        { status: externalResponse.status }\r\n      );\r\n    }\r\n\r\n    const data = await externalResponse.json();\r\n\r\n    return NextResponse.json({ status: \"success\", data });\r\n  } catch (error) {\r\n    console.error(\"Error in /api/scrape/status:\", error);\r\n    return NextResponse.json(\r\n      { status: \"error\", message: \"Internal Server Error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,0CAA0C;;;;AAE1C;;AAEO,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAAkC;IAE1C,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,IAAI,CAAC,QAAQ;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,QAAQ;YAAS,SAAS;QAA2B,GACvD;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,mDAAmD;QACnD,MAAM,mBAAmB,MAAM,MAC7B,GAAG,QAAQ,GAAG,CAAC,WAAW,CAAC,cAAc,EAAE,QAAQ;QAGrD,IAAI,CAAC,iBAAiB,EAAE,EAAE;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,QAAQ;gBAAS,SAAS;YAAsB,GAClD;gBAAE,QAAQ,iBAAiB,MAAM;YAAC;QAEtC;QAEA,MAAM,OAAO,MAAM,iBAAiB,IAAI;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;YAAW;QAAK;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,QAAQ;YAAS,SAAS;QAAwB,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}