{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/Documents/web-scraper/src/app/api/scrape/stream/%5Bid%5D/route.ts"],"sourcesContent":["// app/api/scrape/status/[job_id]/route.ts\r\n\r\nimport { NextRequest } from \"next/server\";\r\n\r\nexport async function GET(\r\n  req: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const { id } = params;\r\n\r\n  if (!id) {\r\n    return new Response(\"Missing job_id parameter\", { status: 400 });\r\n  }\r\n\r\n  // Call FastAPI backend SSE stream\r\n  const backendResponse = await fetch(\r\n    `${process.env.BACKEND_API}scrape/stream/${id}`\r\n  );\r\n\r\n  // Check if response is valid\r\n  if (!backendResponse.ok || !backendResponse.body) {\r\n    return new Response(\"Failed to connect to backend SSE\", { status: 500 });\r\n  }\r\n\r\n  // Forward backend SSE stream to client\r\n  const stream = new ReadableStream({\r\n    async start(controller) {\r\n      const reader = backendResponse.body!.getReader();\r\n      const decoder = new TextDecoder();\r\n      const encoder = new TextEncoder();\r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        controller.enqueue(encoder.encode(chunk));\r\n      }\r\n\r\n      controller.close();\r\n    },\r\n  });\r\n\r\n  return new Response(stream, {\r\n    headers: {\r\n      \"Content-Type\": \"text/event-stream\",\r\n      \"Cache-Control\": \"no-cache\",\r\n      Connection: \"keep-alive\",\r\n    },\r\n  });\r\n}\r\n"],"names":[],"mappings":"AAAA,0CAA0C;;;;AAInC,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,IAAI,CAAC,IAAI;QACP,OAAO,IAAI,SAAS,4BAA4B;YAAE,QAAQ;QAAI;IAChE;IAEA,kCAAkC;IAClC,MAAM,kBAAkB,MAAM,MAC5B,GAAG,QAAQ,GAAG,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI;IAGjD,6BAA6B;IAC7B,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,IAAI,EAAE;QAChD,OAAO,IAAI,SAAS,oCAAoC;YAAE,QAAQ;QAAI;IACxE;IAEA,uCAAuC;IACvC,MAAM,SAAS,IAAI,eAAe;QAChC,MAAM,OAAM,UAAU;YACpB,MAAM,SAAS,gBAAgB,IAAI,CAAE,SAAS;YAC9C,MAAM,UAAU,IAAI;YACpB,MAAM,UAAU,IAAI;YAEpB,MAAO,KAAM;gBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,IAAI;gBACzC,IAAI,MAAM;gBAEV,MAAM,QAAQ,QAAQ,MAAM,CAAC;gBAC7B,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC;YACpC;YAEA,WAAW,KAAK;QAClB;IACF;IAEA,OAAO,IAAI,SAAS,QAAQ;QAC1B,SAAS;YACP,gBAAgB;YAChB,iBAAiB;YACjB,YAAY;QACd;IACF;AACF"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}